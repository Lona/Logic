// Generated by Lona Compiler 0.8.9

import AppKit
import Foundation

// MARK: - PageBlock

public class PageBlock: NSBox {

  // MARK: Lifecycle

  public init(_ parameters: Parameters) {
    self.parameters = parameters

    super.init(frame: .zero)

    setUpViews()
    setUpConstraints()

    update()

    addTrackingArea(trackingArea)
  }

  public convenience init(titleText: String, linkTarget: String) {
    self.init(Parameters(titleText: titleText, linkTarget: linkTarget))
  }

  public convenience init() {
    self.init(Parameters())
  }

  public required init?(coder aDecoder: NSCoder) {
    self.parameters = Parameters()

    super.init(coder: aDecoder)

    setUpViews()
    setUpConstraints()

    update()

    addTrackingArea(trackingArea)
  }

  deinit {
    removeTrackingArea(trackingArea)
  }

  // MARK: Public

  public var onPressBlock: (() -> Void)? {
    get { return parameters.onPressBlock }
    set { parameters.onPressBlock = newValue }
  }

  public var onPressOverflowMenu: (() -> Void)? {
    get { return parameters.onPressOverflowMenu }
    set { parameters.onPressOverflowMenu = newValue }
  }

  public var titleText: String {
    get { return parameters.titleText }
    set {
      if parameters.titleText != newValue {
        parameters.titleText = newValue
      }
    }
  }

  public var linkTarget: String {
    get { return parameters.linkTarget }
    set {
      if parameters.linkTarget != newValue {
        parameters.linkTarget = newValue
      }
    }
  }

  public var parameters: Parameters {
    didSet {
      if parameters != oldValue {
        update()
      }
    }
  }

  // MARK: Private

  private lazy var trackingArea = NSTrackingArea(
    rect: self.frame,
    options: [.mouseEnteredAndExited, .activeAlways, .mouseMoved, .inVisibleRect],
    owner: self)

  private var imageContainerView = NSBox()
  private var titleView = LNATextField(labelWithString: "")
  private var imageContentView = NSBox()
  private var overflowMenuButtonView = OverflowMenuButton()

  private var titleViewTextStyle = TextStyles.pageLink

  private var imageContainerViewHovered = false
  private var imageContainerViewPressed = false
  private var imageContainerViewOnPress: (() -> Void)?

  private var titleViewTrailingAnchorImageContainerViewTrailingAnchorConstraint: NSLayoutConstraint?
  private var imageContentViewHeightAnchorParentConstraint: NSLayoutConstraint?
  private var imageContentViewTrailingAnchorImageContainerViewTrailingAnchorConstraint: NSLayoutConstraint?
  private var imageContentViewLeadingAnchorTitleViewTrailingAnchorConstraint: NSLayoutConstraint?
  private var imageContentViewTopAnchorImageContainerViewTopAnchorConstraint: NSLayoutConstraint?
  private var imageContentViewBottomAnchorImageContainerViewBottomAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewWidthAnchorParentConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewHeightAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewWidthAnchorConstraint: NSLayoutConstraint?

  private func setUpViews() {
    boxType = .custom
    borderType = .noBorder
    contentViewMargins = .zero
    imageContainerView.boxType = .custom
    imageContainerView.borderType = .noBorder
    imageContainerView.contentViewMargins = .zero
    titleView.lineBreakMode = .byWordWrapping
    imageContentView.boxType = .custom
    imageContentView.borderType = .noBorder
    imageContentView.contentViewMargins = .zero

    addSubview(imageContainerView)
    imageContainerView.addSubview(titleView)
    imageContainerView.addSubview(imageContentView)
    imageContentView.addSubview(overflowMenuButtonView)

    imageContainerView.fillColor = Colors.blockBackground
    titleViewTextStyle = TextStyles.pageLink
    titleView.attributedStringValue = titleViewTextStyle.apply(to: titleView.attributedStringValue)
  }

  private func setUpConstraints() {
    translatesAutoresizingMaskIntoConstraints = false
    imageContainerView.translatesAutoresizingMaskIntoConstraints = false
    titleView.translatesAutoresizingMaskIntoConstraints = false
    imageContentView.translatesAutoresizingMaskIntoConstraints = false
    overflowMenuButtonView.translatesAutoresizingMaskIntoConstraints = false

    let imageContainerViewTopAnchorConstraint = imageContainerView.topAnchor.constraint(equalTo: topAnchor)
    let imageContainerViewBottomAnchorConstraint = imageContainerView.bottomAnchor.constraint(equalTo: bottomAnchor)
    let imageContainerViewLeadingAnchorConstraint = imageContainerView.leadingAnchor.constraint(equalTo: leadingAnchor)
    let imageContainerViewTrailingAnchorConstraint = imageContainerView
      .trailingAnchor
      .constraint(equalTo: trailingAnchor)
    let titleViewHeightAnchorParentConstraint = titleView
      .heightAnchor
      .constraint(lessThanOrEqualTo: imageContainerView.heightAnchor, constant: -16)
    let titleViewLeadingAnchorConstraint = titleView
      .leadingAnchor
      .constraint(equalTo: imageContainerView.leadingAnchor, constant: 8)
    let titleViewTopAnchorConstraint = titleView
      .topAnchor
      .constraint(equalTo: imageContainerView.topAnchor, constant: 8)
    let titleViewBottomAnchorConstraint = titleView
      .bottomAnchor
      .constraint(equalTo: imageContainerView.bottomAnchor, constant: -8)
    let titleViewTrailingAnchorImageContainerViewTrailingAnchorConstraint = titleView
      .trailingAnchor
      .constraint(equalTo: imageContainerView.trailingAnchor, constant: -8)
    let imageContentViewHeightAnchorParentConstraint = imageContentView
      .heightAnchor
      .constraint(lessThanOrEqualTo: imageContainerView.heightAnchor, constant: -16)
    let imageContentViewTrailingAnchorImageContainerViewTrailingAnchorConstraint = imageContentView
      .trailingAnchor
      .constraint(equalTo: imageContainerView.trailingAnchor, constant: -8)
    let imageContentViewLeadingAnchorTitleViewTrailingAnchorConstraint = imageContentView
      .leadingAnchor
      .constraint(equalTo: titleView.trailingAnchor)
    let imageContentViewTopAnchorImageContainerViewTopAnchorConstraint = imageContentView
      .topAnchor
      .constraint(equalTo: imageContainerView.topAnchor, constant: 8)
    let imageContentViewBottomAnchorImageContainerViewBottomAnchorConstraint = imageContentView
      .bottomAnchor
      .constraint(equalTo: imageContainerView.bottomAnchor, constant: -8)
    let overflowMenuButtonViewWidthAnchorParentConstraint = overflowMenuButtonView
      .widthAnchor
      .constraint(lessThanOrEqualTo: imageContentView.widthAnchor, constant: -2)
    let overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint = overflowMenuButtonView
      .topAnchor
      .constraint(equalTo: imageContentView.topAnchor, constant: 2)
    let overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint = overflowMenuButtonView
      .trailingAnchor
      .constraint(equalTo: imageContentView.trailingAnchor, constant: -2)
    let overflowMenuButtonViewHeightAnchorConstraint = overflowMenuButtonView
      .heightAnchor
      .constraint(equalToConstant: 13)
    let overflowMenuButtonViewWidthAnchorConstraint = overflowMenuButtonView.widthAnchor.constraint(equalToConstant: 23)

    titleViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow
    imageContentViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow
    overflowMenuButtonViewWidthAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow

    self.titleViewTrailingAnchorImageContainerViewTrailingAnchorConstraint =
      titleViewTrailingAnchorImageContainerViewTrailingAnchorConstraint
    self.imageContentViewHeightAnchorParentConstraint = imageContentViewHeightAnchorParentConstraint
    self.imageContentViewTrailingAnchorImageContainerViewTrailingAnchorConstraint =
      imageContentViewTrailingAnchorImageContainerViewTrailingAnchorConstraint
    self.imageContentViewLeadingAnchorTitleViewTrailingAnchorConstraint =
      imageContentViewLeadingAnchorTitleViewTrailingAnchorConstraint
    self.imageContentViewTopAnchorImageContainerViewTopAnchorConstraint =
      imageContentViewTopAnchorImageContainerViewTopAnchorConstraint
    self.imageContentViewBottomAnchorImageContainerViewBottomAnchorConstraint =
      imageContentViewBottomAnchorImageContainerViewBottomAnchorConstraint
    self.overflowMenuButtonViewWidthAnchorParentConstraint = overflowMenuButtonViewWidthAnchorParentConstraint
    self.overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint =
      overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint
    self.overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint =
      overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint
    self.overflowMenuButtonViewHeightAnchorConstraint = overflowMenuButtonViewHeightAnchorConstraint
    self.overflowMenuButtonViewWidthAnchorConstraint = overflowMenuButtonViewWidthAnchorConstraint

    NSLayoutConstraint.activate(
      [
        imageContainerViewTopAnchorConstraint,
        imageContainerViewBottomAnchorConstraint,
        imageContainerViewLeadingAnchorConstraint,
        imageContainerViewTrailingAnchorConstraint,
        titleViewHeightAnchorParentConstraint,
        titleViewLeadingAnchorConstraint,
        titleViewTopAnchorConstraint,
        titleViewBottomAnchorConstraint
      ] +
        conditionalConstraints(imageContentViewIsHidden: imageContentView.isHidden))
  }

  private func conditionalConstraints(imageContentViewIsHidden: Bool) -> [NSLayoutConstraint] {
    var constraints: [NSLayoutConstraint?]

    switch (imageContentViewIsHidden) {
      case (true):
        constraints = [titleViewTrailingAnchorImageContainerViewTrailingAnchorConstraint]
      case (false):
        constraints = [
          imageContentViewHeightAnchorParentConstraint,
          imageContentViewTrailingAnchorImageContainerViewTrailingAnchorConstraint,
          imageContentViewLeadingAnchorTitleViewTrailingAnchorConstraint,
          imageContentViewTopAnchorImageContainerViewTopAnchorConstraint,
          imageContentViewBottomAnchorImageContainerViewBottomAnchorConstraint,
          overflowMenuButtonViewWidthAnchorParentConstraint,
          overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint,
          overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint,
          overflowMenuButtonViewHeightAnchorConstraint,
          overflowMenuButtonViewWidthAnchorConstraint
        ]
    }

    return constraints.compactMap({ $0 })
  }

  private func update() {
    let imageContentViewIsHidden = imageContentView.isHidden

    alphaValue = 1
    imageContentView.isHidden = !false
    imageContainerViewOnPress = handleOnPressBlock
    overflowMenuButtonView.onPressButton = handleOnPressOverflowMenu
    titleView.attributedStringValue = titleViewTextStyle.apply(to: titleText)
    if imageContainerViewHovered {
      imageContentView.isHidden = !true
      alphaValue = 0.75
    }

    if imageContentView.isHidden != imageContentViewIsHidden {
      NSLayoutConstraint.deactivate(conditionalConstraints(imageContentViewIsHidden: imageContentViewIsHidden))
      NSLayoutConstraint.activate(conditionalConstraints(imageContentViewIsHidden: imageContentView.isHidden))
    }
  }

  private func handleOnPressBlock() {
    onPressBlock?()
  }

  private func handleOnPressOverflowMenu() {
    onPressOverflowMenu?()
  }

  private func updateHoverState(with event: NSEvent) {
    let imageContainerViewHovered = imageContainerView
      .bounds
      .contains(imageContainerView.convert(event.locationInWindow, from: nil))
    if imageContainerViewHovered != self.imageContainerViewHovered {
      self.imageContainerViewHovered = imageContainerViewHovered

      update()
    }
  }

  public override func mouseEntered(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseMoved(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseDragged(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseExited(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseDown(with event: NSEvent) {
    let imageContainerViewPressed = imageContainerView
      .bounds
      .contains(imageContainerView.convert(event.locationInWindow, from: nil))
    if imageContainerViewPressed != self.imageContainerViewPressed {
      self.imageContainerViewPressed = imageContainerViewPressed

      update()
    }
  }

  public override func mouseUp(with event: NSEvent) {
    let imageContainerViewClicked = imageContainerViewPressed &&
      imageContainerView.bounds.contains(imageContainerView.convert(event.locationInWindow, from: nil))

    if imageContainerViewPressed {
      imageContainerViewPressed = false

      update()
    }

    if imageContainerViewClicked {
      imageContainerViewOnPress?()
    }
  }
}

// MARK: - Parameters

extension PageBlock {
  public struct Parameters: Equatable {
    public var titleText: String
    public var linkTarget: String
    public var onPressBlock: (() -> Void)?
    public var onPressOverflowMenu: (() -> Void)?

    public init(
      titleText: String,
      linkTarget: String,
      onPressBlock: (() -> Void)? = nil,
      onPressOverflowMenu: (() -> Void)? = nil)
    {
      self.titleText = titleText
      self.linkTarget = linkTarget
      self.onPressBlock = onPressBlock
      self.onPressOverflowMenu = onPressOverflowMenu
    }

    public init() {
      self.init(titleText: "", linkTarget: "")
    }

    public static func ==(lhs: Parameters, rhs: Parameters) -> Bool {
      return lhs.titleText == rhs.titleText && lhs.linkTarget == rhs.linkTarget
    }
  }
}

// MARK: - Model

extension PageBlock {
  public struct Model: LonaViewModel, Equatable {
    public var id: String?
    public var parameters: Parameters
    public var type: String {
      return "PageBlock"
    }

    public init(id: String? = nil, parameters: Parameters) {
      self.id = id
      self.parameters = parameters
    }

    public init(_ parameters: Parameters) {
      self.parameters = parameters
    }

    public init(
      titleText: String,
      linkTarget: String,
      onPressBlock: (() -> Void)? = nil,
      onPressOverflowMenu: (() -> Void)? = nil)
    {
      self
        .init(
          Parameters(
            titleText: titleText,
            linkTarget: linkTarget,
            onPressBlock: onPressBlock,
            onPressOverflowMenu: onPressOverflowMenu))
    }

    public init() {
      self.init(titleText: "", linkTarget: "")
    }
  }
}
