// Generated by Lona Compiler 0.6.0

import AppKit
import Foundation

// MARK: - ImageWithBackgroundColor

private class ImageWithBackgroundColor: LNAImageView {
  var fillColor = NSColor.clear

  override func draw(_ dirtyRect: NSRect) {
    fillColor.set()
    bounds.fill()
    super.draw(dirtyRect)
  }
}


// MARK: - ImageBlock

public class ImageBlock: NSBox {

  // MARK: Lifecycle

  public init(_ parameters: Parameters) {
    self.parameters = parameters

    super.init(frame: .zero)

    setUpViews()
    setUpConstraints()

    update()

    addTrackingArea(trackingArea)
  }

  public convenience init(imageWidth: CGFloat, imageHeight: CGFloat, image: NSImage) {
    self.init(Parameters(imageWidth: imageWidth, imageHeight: imageHeight, image: image))
  }

  public convenience init() {
    self.init(Parameters())
  }

  public required init?(coder aDecoder: NSCoder) {
    self.parameters = Parameters()

    super.init(coder: aDecoder)

    setUpViews()
    setUpConstraints()

    update()

    addTrackingArea(trackingArea)
  }

  deinit {
    removeTrackingArea(trackingArea)
  }

  // MARK: Public

  public var imageWidth: CGFloat {
    get { return parameters.imageWidth }
    set {
      if parameters.imageWidth != newValue {
        parameters.imageWidth = newValue
      }
    }
  }

  public var imageHeight: CGFloat {
    get { return parameters.imageHeight }
    set {
      if parameters.imageHeight != newValue {
        parameters.imageHeight = newValue
      }
    }
  }

  public var image: NSImage {
    get { return parameters.image }
    set {
      if parameters.image != newValue {
        parameters.image = newValue
      }
    }
  }

  public var onPressImage: (() -> Void)? {
    get { return parameters.onPressImage }
    set { parameters.onPressImage = newValue }
  }

  public var onPressOverflowMenu: (() -> Void)? {
    get { return parameters.onPressOverflowMenu }
    set { parameters.onPressOverflowMenu = newValue }
  }

  public var parameters: Parameters {
    didSet {
      if parameters != oldValue {
        update()
      }
    }
  }

  // MARK: Private

  private lazy var trackingArea = NSTrackingArea(
    rect: self.frame,
    options: [.mouseEnteredAndExited, .activeAlways, .mouseMoved, .inVisibleRect],
    owner: self)

  private var imageContainerView = NSBox()
  private var imageView = ImageWithBackgroundColor()
  private var imageContentView = NSBox()
  private var overflowMenuButtonView = OverflowMenuButton()

  private var imageContainerViewHovered = false
  private var imageContainerViewPressed = false
  private var imageContainerViewOnPress: (() -> Void)?

  private var imageContentViewTopAnchorImageViewTopAnchorConstraint: NSLayoutConstraint?
  private var imageContentViewBottomAnchorImageViewBottomAnchorConstraint: NSLayoutConstraint?
  private var imageContentViewLeadingAnchorImageViewLeadingAnchorConstraint: NSLayoutConstraint?
  private var imageContentViewTrailingAnchorImageViewTrailingAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewHeightAnchorConstraint: NSLayoutConstraint?
  private var overflowMenuButtonViewWidthAnchorConstraint: NSLayoutConstraint?
  private var imageViewHeightAnchorConstraint: NSLayoutConstraint?
  private var imageViewWidthAnchorConstraint: NSLayoutConstraint?

  private func setUpViews() {
    boxType = .custom
    borderType = .noBorder
    contentViewMargins = .zero
    imageContainerView.boxType = .custom
    imageContainerView.borderType = .noBorder
    imageContainerView.contentViewMargins = .zero
    imageContentView.boxType = .custom
    imageContentView.borderType = .noBorder
    imageContentView.contentViewMargins = .zero

    addSubview(imageContainerView)
    imageContainerView.addSubview(imageView)
    imageView.addSubview(imageContentView)
    imageContentView.addSubview(overflowMenuButtonView)

    imageView.fillColor = Colors.blockBackground
  }

  private func setUpConstraints() {
    translatesAutoresizingMaskIntoConstraints = false
    imageContainerView.translatesAutoresizingMaskIntoConstraints = false
    imageView.translatesAutoresizingMaskIntoConstraints = false
    imageContentView.translatesAutoresizingMaskIntoConstraints = false
    overflowMenuButtonView.translatesAutoresizingMaskIntoConstraints = false

    let imageContainerViewTopAnchorConstraint = imageContainerView.topAnchor.constraint(equalTo: topAnchor)
    let imageContainerViewBottomAnchorConstraint = imageContainerView.bottomAnchor.constraint(equalTo: bottomAnchor)
    let imageContainerViewLeadingAnchorConstraint = imageContainerView.leadingAnchor.constraint(equalTo: leadingAnchor)
    let imageContainerViewTrailingAnchorConstraint = imageContainerView
      .trailingAnchor
      .constraint(lessThanOrEqualTo: trailingAnchor)
    let imageViewWidthAnchorParentConstraint = imageView
      .widthAnchor
      .constraint(lessThanOrEqualTo: imageContainerView.widthAnchor)
    let imageViewTopAnchorConstraint = imageView.topAnchor.constraint(equalTo: imageContainerView.topAnchor)
    let imageViewBottomAnchorConstraint = imageView.bottomAnchor.constraint(equalTo: imageContainerView.bottomAnchor)
    let imageViewLeadingAnchorConstraint = imageView.leadingAnchor.constraint(equalTo: imageContainerView.leadingAnchor)
    let imageViewHeightAnchorConstraint = imageView.heightAnchor.constraint(equalToConstant: 100)
    let imageViewWidthAnchorConstraint = imageView.widthAnchor.constraint(equalToConstant: 100)
    let imageContentViewTopAnchorImageViewTopAnchorConstraint = imageContentView
      .topAnchor
      .constraint(equalTo: imageView.topAnchor)
    let imageContentViewBottomAnchorImageViewBottomAnchorConstraint = imageContentView
      .bottomAnchor
      .constraint(equalTo: imageView.bottomAnchor)
    let imageContentViewLeadingAnchorImageViewLeadingAnchorConstraint = imageContentView
      .leadingAnchor
      .constraint(equalTo: imageView.leadingAnchor)
    let imageContentViewTrailingAnchorImageViewTrailingAnchorConstraint = imageContentView
      .trailingAnchor
      .constraint(equalTo: imageView.trailingAnchor)
    let overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint = overflowMenuButtonView
      .topAnchor
      .constraint(equalTo: imageContentView.topAnchor, constant: 4)
    let overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint = overflowMenuButtonView
      .trailingAnchor
      .constraint(equalTo: imageContentView.trailingAnchor, constant: -4)
    let overflowMenuButtonViewHeightAnchorConstraint = overflowMenuButtonView
      .heightAnchor
      .constraint(equalToConstant: 13)
    let overflowMenuButtonViewWidthAnchorConstraint = overflowMenuButtonView.widthAnchor.constraint(equalToConstant: 23)

    imageViewWidthAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow

    self.imageContentViewTopAnchorImageViewTopAnchorConstraint = imageContentViewTopAnchorImageViewTopAnchorConstraint
    self.imageContentViewBottomAnchorImageViewBottomAnchorConstraint =
      imageContentViewBottomAnchorImageViewBottomAnchorConstraint
    self.imageContentViewLeadingAnchorImageViewLeadingAnchorConstraint =
      imageContentViewLeadingAnchorImageViewLeadingAnchorConstraint
    self.imageContentViewTrailingAnchorImageViewTrailingAnchorConstraint =
      imageContentViewTrailingAnchorImageViewTrailingAnchorConstraint
    self.overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint =
      overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint
    self.overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint =
      overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint
    self.overflowMenuButtonViewHeightAnchorConstraint = overflowMenuButtonViewHeightAnchorConstraint
    self.overflowMenuButtonViewWidthAnchorConstraint = overflowMenuButtonViewWidthAnchorConstraint

    self.imageViewHeightAnchorConstraint = imageViewHeightAnchorConstraint
    self.imageViewWidthAnchorConstraint = imageViewWidthAnchorConstraint

    NSLayoutConstraint.activate(
      [
        imageContainerViewTopAnchorConstraint,
        imageContainerViewBottomAnchorConstraint,
        imageContainerViewLeadingAnchorConstraint,
        imageContainerViewTrailingAnchorConstraint,
        imageViewWidthAnchorParentConstraint,
        imageViewTopAnchorConstraint,
        imageViewBottomAnchorConstraint,
        imageViewLeadingAnchorConstraint,
        imageViewHeightAnchorConstraint,
        imageViewWidthAnchorConstraint
      ] +
        conditionalConstraints(imageContentViewIsHidden: imageContentView.isHidden))
  }

  private func conditionalConstraints(imageContentViewIsHidden: Bool) -> [NSLayoutConstraint] {
    var constraints: [NSLayoutConstraint?]

    switch (imageContentViewIsHidden) {
      case (true):
        constraints = []
      case (false):
        constraints = [
          imageContentViewTopAnchorImageViewTopAnchorConstraint,
          imageContentViewBottomAnchorImageViewBottomAnchorConstraint,
          imageContentViewLeadingAnchorImageViewLeadingAnchorConstraint,
          imageContentViewTrailingAnchorImageViewTrailingAnchorConstraint,
          overflowMenuButtonViewTopAnchorImageContentViewTopAnchorConstraint,
          overflowMenuButtonViewTrailingAnchorImageContentViewTrailingAnchorConstraint,
          overflowMenuButtonViewHeightAnchorConstraint,
          overflowMenuButtonViewWidthAnchorConstraint
        ]
    }

    return constraints.compactMap({ $0 })
  }

  private func update() {
    let imageContentViewIsHidden = imageContentView.isHidden

    alphaValue = 1
    imageContentView.isHidden = !false
    imageViewHeightAnchorConstraint?.constant = imageHeight
    imageViewWidthAnchorConstraint?.constant = imageWidth
    imageView.image = image
    imageContainerViewOnPress = handleOnPressImage
    overflowMenuButtonView.onPressButton = handleOnPressOverflowMenu
    if imageContainerViewHovered {
      imageContentView.isHidden = !true
      alphaValue = 0.75
    }

    if imageContentView.isHidden != imageContentViewIsHidden {
      NSLayoutConstraint.deactivate(conditionalConstraints(imageContentViewIsHidden: imageContentViewIsHidden))
      NSLayoutConstraint.activate(conditionalConstraints(imageContentViewIsHidden: imageContentView.isHidden))
    }
  }

  private func handleOnPressImage() {
    onPressImage?()
  }

  private func handleOnPressOverflowMenu() {
    onPressOverflowMenu?()
  }

  private func updateHoverState(with event: NSEvent) {
    let imageContainerViewHovered = imageContainerView
      .bounds
      .contains(imageContainerView.convert(event.locationInWindow, from: nil))
    if imageContainerViewHovered != self.imageContainerViewHovered {
      self.imageContainerViewHovered = imageContainerViewHovered

      update()
    }
  }

  public override func mouseEntered(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseMoved(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseDragged(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseExited(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseDown(with event: NSEvent) {
    let imageContainerViewPressed = imageContainerView
      .bounds
      .contains(imageContainerView.convert(event.locationInWindow, from: nil))
    if imageContainerViewPressed != self.imageContainerViewPressed {
      self.imageContainerViewPressed = imageContainerViewPressed

      update()
    }
  }

  public override func mouseUp(with event: NSEvent) {
    let imageContainerViewClicked = imageContainerViewPressed &&
      imageContainerView.bounds.contains(imageContainerView.convert(event.locationInWindow, from: nil))

    if imageContainerViewPressed {
      imageContainerViewPressed = false

      update()
    }

    if imageContainerViewClicked {
      imageContainerViewOnPress?()
    }
  }
}

// MARK: - Parameters

extension ImageBlock {
  public struct Parameters: Equatable {
    public var imageWidth: CGFloat
    public var imageHeight: CGFloat
    public var image: NSImage
    public var onPressImage: (() -> Void)?
    public var onPressOverflowMenu: (() -> Void)?

    public init(
      imageWidth: CGFloat,
      imageHeight: CGFloat,
      image: NSImage,
      onPressImage: (() -> Void)? = nil,
      onPressOverflowMenu: (() -> Void)? = nil)
    {
      self.imageWidth = imageWidth
      self.imageHeight = imageHeight
      self.image = image
      self.onPressImage = onPressImage
      self.onPressOverflowMenu = onPressOverflowMenu
    }

    public init() {
      self.init(imageWidth: 0, imageHeight: 0, image: NSImage())
    }

    public static func ==(lhs: Parameters, rhs: Parameters) -> Bool {
      return lhs.imageWidth == rhs.imageWidth && lhs.imageHeight == rhs.imageHeight && lhs.image == rhs.image
    }
  }
}

// MARK: - Model

extension ImageBlock {
  public struct Model: LonaViewModel, Equatable {
    public var id: String?
    public var parameters: Parameters
    public var type: String {
      return "ImageBlock"
    }

    public init(id: String? = nil, parameters: Parameters) {
      self.id = id
      self.parameters = parameters
    }

    public init(_ parameters: Parameters) {
      self.parameters = parameters
    }

    public init(
      imageWidth: CGFloat,
      imageHeight: CGFloat,
      image: NSImage,
      onPressImage: (() -> Void)? = nil,
      onPressOverflowMenu: (() -> Void)? = nil)
    {
      self
        .init(
          Parameters(
            imageWidth: imageWidth,
            imageHeight: imageHeight,
            image: image,
            onPressImage: onPressImage,
            onPressOverflowMenu: onPressOverflowMenu))
    }

    public init() {
      self.init(imageWidth: 0, imageHeight: 0, image: NSImage())
    }
  }
}
