// Generated by Lona Compiler 0.9.1

import AppKit
import Foundation

// MARK: - ImageWithBackgroundColor

private class ImageWithBackgroundColor: LNAImageView {
  var fillColor = NSColor.clear

  override func draw(_ dirtyRect: NSRect) {
    fillColor.set()
    bounds.fill()
    super.draw(dirtyRect)
  }
}


// MARK: - ImageBlock

public class ImageBlock: NSBox {

  // MARK: Lifecycle

  public init(_ parameters: Parameters) {
    self.parameters = parameters

    super.init(frame: .zero)

    setUpViews()
    setUpConstraints()

    update()

    addTrackingArea(trackingArea)
  }

  public convenience init(imageWidth: CGFloat, imageHeight: CGFloat, image: NSImage) {
    self.init(Parameters(imageWidth: imageWidth, imageHeight: imageHeight, image: image))
  }

  public convenience init() {
    self.init(Parameters())
  }

  public required init?(coder aDecoder: NSCoder) {
    self.parameters = Parameters()

    super.init(coder: aDecoder)

    setUpViews()
    setUpConstraints()

    update()

    addTrackingArea(trackingArea)
  }

  deinit {
    removeTrackingArea(trackingArea)
  }

  // MARK: Public

  public var imageWidth: CGFloat {
    get { return parameters.imageWidth }
    set {
      if parameters.imageWidth != newValue {
        parameters.imageWidth = newValue
      }
    }
  }

  public var imageHeight: CGFloat {
    get { return parameters.imageHeight }
    set {
      if parameters.imageHeight != newValue {
        parameters.imageHeight = newValue
      }
    }
  }

  public var image: NSImage {
    get { return parameters.image }
    set {
      if parameters.image != newValue {
        parameters.image = newValue
      }
    }
  }

  public var onPressImage: (() -> Void)? {
    get { return parameters.onPressImage }
    set { parameters.onPressImage = newValue }
  }

  public var parameters: Parameters {
    didSet {
      if parameters != oldValue {
        update()
      }
    }
  }

  // MARK: Private

  private lazy var trackingArea = NSTrackingArea(
    rect: self.frame,
    options: [.mouseEnteredAndExited, .activeAlways, .mouseMoved, .inVisibleRect],
    owner: self)

  private var imageContainerView = NSBox()
  private var imageView = ImageWithBackgroundColor()

  private var hovered = false
  private var pressed = false
  private var onPress: (() -> Void)?

  private var imageViewHeightAnchorConstraint: NSLayoutConstraint?
  private var imageViewWidthAnchorConstraint: NSLayoutConstraint?

  private func setUpViews() {
    boxType = .custom
    borderType = .noBorder
    contentViewMargins = .zero
    imageContainerView.boxType = .custom
    imageContainerView.borderType = .noBorder
    imageContainerView.contentViewMargins = .zero

    addSubview(imageContainerView)
    imageContainerView.addSubview(imageView)

    imageView.fillColor = Colors.blockBackground
  }

  private func setUpConstraints() {
    translatesAutoresizingMaskIntoConstraints = false
    imageContainerView.translatesAutoresizingMaskIntoConstraints = false
    imageView.translatesAutoresizingMaskIntoConstraints = false

    let imageContainerViewTopAnchorConstraint = imageContainerView.topAnchor.constraint(equalTo: topAnchor)
    let imageContainerViewBottomAnchorConstraint = imageContainerView.bottomAnchor.constraint(equalTo: bottomAnchor)
    let imageContainerViewLeadingAnchorConstraint = imageContainerView.leadingAnchor.constraint(equalTo: leadingAnchor)
    let imageContainerViewTrailingAnchorConstraint = imageContainerView
      .trailingAnchor
      .constraint(lessThanOrEqualTo: trailingAnchor)
    let imageViewWidthAnchorParentConstraint = imageView
      .widthAnchor
      .constraint(lessThanOrEqualTo: imageContainerView.widthAnchor)
    let imageViewTopAnchorConstraint = imageView.topAnchor.constraint(equalTo: imageContainerView.topAnchor)
    let imageViewBottomAnchorConstraint = imageView.bottomAnchor.constraint(equalTo: imageContainerView.bottomAnchor)
    let imageViewLeadingAnchorConstraint = imageView.leadingAnchor.constraint(equalTo: imageContainerView.leadingAnchor)
    let imageViewHeightAnchorConstraint = imageView.heightAnchor.constraint(equalToConstant: 100)
    let imageViewWidthAnchorConstraint = imageView.widthAnchor.constraint(equalToConstant: 100)

    imageViewWidthAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow

    self.imageViewHeightAnchorConstraint = imageViewHeightAnchorConstraint
    self.imageViewWidthAnchorConstraint = imageViewWidthAnchorConstraint

    NSLayoutConstraint.activate([
      imageContainerViewTopAnchorConstraint,
      imageContainerViewBottomAnchorConstraint,
      imageContainerViewLeadingAnchorConstraint,
      imageContainerViewTrailingAnchorConstraint,
      imageViewWidthAnchorParentConstraint,
      imageViewTopAnchorConstraint,
      imageViewBottomAnchorConstraint,
      imageViewLeadingAnchorConstraint,
      imageViewHeightAnchorConstraint,
      imageViewWidthAnchorConstraint
    ])
  }

  private func update() {
    alphaValue = 1
    imageViewHeightAnchorConstraint?.constant = imageHeight
    imageViewWidthAnchorConstraint?.constant = imageWidth
    imageView.image = image
    onPress = handleOnPressImage
    if hovered {
      alphaValue = 0.75
    }
  }

  private func handleOnPressImage() {
    onPressImage?()
  }

  private func updateHoverState(with event: NSEvent) {
    let hovered = bounds.contains(convert(event.locationInWindow, from: nil))
    if hovered != self.hovered {
      self.hovered = hovered

      update()
    }
  }

  public override func mouseEntered(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseMoved(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseDragged(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseExited(with event: NSEvent) {
    updateHoverState(with: event)
  }

  public override func mouseDown(with event: NSEvent) {
    let pressed = bounds.contains(convert(event.locationInWindow, from: nil))
    if pressed != self.pressed {
      self.pressed = pressed

      update()
    }
  }

  public override func mouseUp(with event: NSEvent) {
    let clicked = pressed && bounds.contains(convert(event.locationInWindow, from: nil))

    if pressed {
      pressed = false

      update()
    }

    if clicked {
      onPress?()
    }
  }
}

// MARK: - Parameters

extension ImageBlock {
  public struct Parameters: Equatable {
    public var imageWidth: CGFloat
    public var imageHeight: CGFloat
    public var image: NSImage
    public var onPressImage: (() -> Void)?

    public init(imageWidth: CGFloat, imageHeight: CGFloat, image: NSImage, onPressImage: (() -> Void)? = nil) {
      self.imageWidth = imageWidth
      self.imageHeight = imageHeight
      self.image = image
      self.onPressImage = onPressImage
    }

    public init() {
      self.init(imageWidth: 0, imageHeight: 0, image: NSImage())
    }

    public static func ==(lhs: Parameters, rhs: Parameters) -> Bool {
      return lhs.imageWidth == rhs.imageWidth && lhs.imageHeight == rhs.imageHeight && lhs.image == rhs.image
    }
  }
}

// MARK: - Model

extension ImageBlock {
  public struct Model: LonaViewModel, Equatable {
    public var id: String?
    public var parameters: Parameters
    public var type: String {
      return "ImageBlock"
    }

    public init(id: String? = nil, parameters: Parameters) {
      self.id = id
      self.parameters = parameters
    }

    public init(_ parameters: Parameters) {
      self.parameters = parameters
    }

    public init(imageWidth: CGFloat, imageHeight: CGFloat, image: NSImage, onPressImage: (() -> Void)? = nil) {
      self.init(Parameters(imageWidth: imageWidth, imageHeight: imageHeight, image: image, onPressImage: onPressImage))
    }

    public init() {
      self.init(imageWidth: 0, imageHeight: 0, image: NSImage())
    }
  }
}
